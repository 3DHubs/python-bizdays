{"name":"python-bizdays","tagline":"Business Days Calculations and Utilities in Python","body":"In several countries and markets, the accountability of the price of a financial\r\ninstrument, mainly bonds and derivatives, involves the use of different\r\nrules to compute the way the days go by.\r\nIn some countries, like in Brazil, several financial instrument only pay interest for business days along their life cycle.\r\nTherefore, having a way to compute the number of business days between 2 dates is quite useful to price the financial instruments properly.\r\nIt is necessary the holidays which occur between the 2 dates, to compute the business days and they are intrinsically related to counties and local markets.\r\nIn Brazil, [ANBIMA](www.anbima.com.br) prepares a file with a list of holidays up to the year of 1978 which is largely used by market practioners for pricing financial instruments.\r\n<!-- Usually you have a list with the holidays and all you want\r\nis to find out the number of business days between two dates, nothing more. \r\nIt is necessary for pricing properly the financial instrument. -->\r\nSeveral financial libraries compute the holidays, giving no option to users set it by their own.\r\nFurtherly, the financial calendar is usually a small feature of a huge library, as [quantlib](quantlib.org), for example, and some users, including myself, don't want to put a hand in such a huge library only to use the financial calendar.\r\n\r\n**bizdays** is a pure Python module relying on its simplicity and the power of Python's batteries.\r\nbizdays computes business days between two dates and other collateral effects, like adjust a given date for the next or previous business day, check whether a date is a business day, creates generators of business days sequences, and so forth.\r\nbizdays is a module without further dependencies, what makes it appropriated for small implementations.\r\n\r\n## Install\r\n\r\n**bizdays** is avalilable at PyPI, so it is pip and easy_install instalable.\r\n\r\n\tpip install bizdays\r\n\r\nor\r\n\r\n\teasy_install bizdays\r\n\r\n## Using\r\n\r\nBusiness days calculations are done defining a `Calendar` object.\r\n\r\n```python\r\nfrom bizdays import Calendar\r\ncal = Calendar(holidays, ['Sunday', 'Saturday'])\r\n```\r\n\r\nwhere `holidays` is a sequence of dates which represents nonworking dates and the second argument, `weekdays`, is a sequence with nonworking weekdays.\r\n`holidays` must be a sequence of strings with ISO formatted dates or `datetime.date` objects and `weekdays` a sequence of weekdays in words.\r\n\r\nOnce you have a `Calendar` you can\r\n\r\n```python\r\n>>> cal.isbizday('2014-01-12')\r\nFalse\r\n>>> cal.isbizday('2014-01-13')\r\nTrue\r\n>>> cal.bizdays('2014-01-13', '2015-01-13')\r\n253\r\n>>> cal.adjust_next('2015-12-25')\r\ndatetime.date(2015, 12, 28)\r\n>>> cal.adjust_next('2015-12-28')\r\ndatetime.date(2015, 12, 28)\r\n>>> cal.adjust_previous('2014-01-01')\r\ndatetime.date(2013, 12, 31)\r\n>>> cal.adjust_previous('2014-01-02')\r\ndatetime.date(2014, 1, 2)\r\n>>> cal.seq('2014-01-02', '2014-01-07')\r\n<generator object seq at 0x1092b02d0>\r\n>>> list(cal.seq('2014-01-02', '2014-01-07'))\r\n[datetime.date(2014, 1, 2),\r\n datetime.date(2014, 1, 3),\r\n datetime.date(2014, 1, 6),\r\n datetime.date(2014, 1, 7)]\r\n>>> cal.offset('2014-01-02', 5)\r\ndatetime.date(2014, 1, 9)\r\n>>> cal.getdate('15th day', 2002, 5)\r\ndatetime.date(2002, 5, 15)\r\n>>> cal.getdate('15th bizday', 2002, 5)\r\ndatetime.date(2002, 5, 22)\r\n>>> cal.getdate('last wed', 2002, 5)\r\ndatetime.date(2002, 5, 29)\r\n>>> cal.getdate('first fri before last day ', 2002, 5)\r\ndatetime.date(2002, 5, 24)\r\n```\r\n\r\nIn this example I used the list of holidays released by [ANBIMA](http://www.anbima.com.br/feriados/feriados.asp).\r\n\r\n> **Important note on date arguments and returning dates**\r\n> \r\n> As you can see in the examples all date arguments are strings ISO formatted (`YYYY-mm-dd` or `%Y-%m-%d`), but they can also be passed as `datetime.date` objects.\r\n> All returning dates are `datetime.date` objects (or a sequence of it), unless you set `iso=True`, that will return an ISO formatted string.\r\n\r\n### Calendar Specification\r\n\r\nCalendar specification is a text file containing the weekdays to be considered as nonworking days and a ISO formatted list of dates representing holidays.\r\nI usually use a `.cal` extension on those files.\r\nHere it follows an example called `Test.cal`:\r\n\r\n\tSaturday\r\n\tSunday\r\n\t2001-01-01\r\n\t2002-01-01\r\n\t2012-12-25\r\n\t2013-01-01\r\n\r\nIt has 4 holidays and the weekend as nonworking days.\r\nTo create that calendar you need to call `Calendar.load`\r\n\r\n```{python}\r\n>>> cal = Calendar.load('Test.cal')\r\n>>> cal\r\nCalendar: Test\r\nStart: 2001-01-01\r\nEnd: 2013-01-01\r\nHolidays: 4\r\n```\r\n\r\n> The `startdate` and `enddate` of a `Calendar` are defined accordingly the first and last given holidays.\r\n\r\n### bizdays\r\n\r\nTo compute the business days between two dates you call `bizdays` passing a tuple with the dates defining the period you are interested in (*from* and *to* dates).\r\n\r\n```{python}\r\n>>> cal.bizdays('2012-12-31', '2013-01-03')\r\n2\r\n```\r\n\r\nHere we have the output of `cal` for January of 2013 which allow us to check the results.\r\n\r\n\t      Janeiro       \r\n\tDo Se Te Qu Qu Se SÃ¡\r\n\t       1  2  3  4  5\r\n\t 6  7  8  9 10 11 12\r\n\t13 14 15 16 17 18 19\r\n\t20 21 22 23 24 25 26\r\n\t27 28 29 30 31      \r\n\r\n### getdate\r\n\r\nYou specify dates by its position or related to other dates, for example:\r\n\r\n```{python}\r\n>>> cal.getdate('15th day', 2002, 5)\r\ndatetime.date(2002, 5, 15)\r\n```\r\n\r\nit returns the 15th day of 2002 may. You can also reffer to the whole year.\r\n\r\n```{python}\r\n>>> cal.getdate('150th day', 2002)\r\ndatetime.date(2002, 5, 30)\r\n```\r\n\r\nIt accepts `day`, `bizday` and weekdays by: `sun`, `mon`, `tue`, `wed`, `thu`, `fri`, and `sat`.\r\n\r\n```{python}\r\n>>> cal.getdate('last day', 2006)\r\ndatetime.date(2006, 12, 31)\r\n>>> cal.getdate('last bizday', 2006)\r\ndatetime.date(2006, 12, 29)\r\n>>> cal.getdate('last mon', 2006)\r\ndatetime.date(2006, 12, 25)\r\n```\r\n\r\nFor postion you use: `first`, `second`, `third`, `1st`, `2nd`, `3rd`, `[n]th`, and `last`.\r\n\r\n#### Using date postions as a reference\r\n\r\nYou can find before and after other date positions (using date positions as a reference).\r\n\r\n```{python}\r\n>>> cal.getdate('last mon before 30th day', 2006, 7)\r\ndatetime.date(2006, 7, 24)\r\n>>> cal.getdate('second bizday after 15th day', 2006)\r\ndatetime.date(2006, 1, 18)\r\n```\r\n\r\n### adjust_next and adjust_previous\r\n\r\nSeveral contracts, by default, always expiry in the same day, for example, 1st Januray, which isn't a business day, so instead of carrying your code\r\nwith awful test you could call `adjust_next` which returns the given date\r\nwhether it is a business day or the next business day.\r\n\r\n```{python}\r\n>>> cal.adjust_next('2013-01-01')\r\ndatetime.date(2013, 1, 2)\r\n>>> cal.adjust_next('2013-01-02')\r\ndatetime.date(2013, 1, 2)\r\n```\r\n\r\nWe also have `adjust_previous`, although I suppose it is unusual, too.\r\n\r\n```{python}\r\n>>> cal.adjust_previous('2013-01-01')\r\ndatetime.date(2012, 12, 31)\r\n```\r\n\r\n#### following and preceding\r\n\r\nThe functions `following` and `preceding` reffer to `adjust_next` and `adjust_previous`, respectively.\r\n\r\n```{python}\r\n>>> cal.following('2013-01-01')\r\ndatetime.date(2013, 1, 2)\r\n>>> cal.preceding('2013-01-01')\r\ndatetime.date(2012, 12, 31)\r\n```\r\n\r\n#### modified_following and modified_preceding\r\n\r\n`modified_following` and `modified_preceding` are common functions used to specify maturity of contracts.\r\nThey work the same way `following` and `preceding` but once the returning date is a different month it is adjusted to the `following` or `preceding` business day in the same month.\r\n\r\n```{python}\r\n>>> dt = cal.getdate('last day', 2002, 3)\r\n>>> dt\r\ndatetime.date(2002, 3, 31)\r\n>>> cal.modified_following(dt, iso=True)\r\n'2002-03-28'\r\n>>> cal.isbizday('2002-03-29')\r\nFalse\r\n>>> dt = cal.getdate('first day', 2002, 6)\r\n>>> dt\r\ndatetime.date(2002, 6, 1)\r\n>>> cal.modified_preceding(dt, iso=True)\r\n'2002-06-03'\r\n```\r\n\r\n### seq\r\n\r\nTo execute calculations through sequential dates, sometimes you must consider only business days.\r\nFor example, you want to compute the price of a bond from its issue date up to its maturity.\r\nYou have to walk over business days in order to carry the contract up to maturity.\r\nTo accomplish that you use the `seq` method (stolen from R) which returns a sequence generator of business days.\r\n\r\n```{python}\r\n>>> for dt in cal.seq('2012-12-31', '2013-01-03'):\r\n...     print dt\r\n... \r\n2012-12-31\r\n2013-01-02\r\n2013-01-03\r\n```\r\n\r\n### offset\r\n\r\nThis method offsets the given date by `n` days respecting the calendar, so it obligatorily returns a business day.\r\n\r\n```{python}\r\n>>> cal.offset('2013-01-02', 1)\r\ndatetime.date(2013, 1, 3)\r\n>>> cal.offset('2013-01-02', 3)\r\ndatetime.date(2013, 1, 7)\r\n>>> cal.offset('2013-01-02', 0)\r\ndatetime.date(2013, 1, 2)\r\n```\r\n\r\nObviously, if you want to offset backwards you can use `-n`.\r\n\r\n```{python}\r\n>>> print cal.offset('2013-01-02', -1)\r\n2012-12-31\r\n>>> print cal.offset('2013-01-02', -3)\r\n2012-12-27\r\n```\r\nOnce the given date is a business day there is no problems, but if instead it isn't a working day the offset can lead to unexpected results. For example:\r\n\r\n```{python}\r\n>>> cal.offset('2013-01-01', 1)\r\ndatetime.date(2013, 1, 3)\r\n>>> cal.offset('2013-01-01', 0)\r\ndatetime.date(2013, 1, 2)\r\n>>> cal.offset('2013-01-01', -1)\r\ndatetime.date(2012, 12, 28)\r\n```\r\nThis happens because before starting to offset the date, the given date is adjusted to its next or previous business day. If `n >= 0` the adjustment is positive, so to the next business day, otherwise it is adjusted to the previous business day.\r\n\r\n## Actual Calendar\r\n\r\nThe Actual Calendar can be defined as\r\n\r\n```{python}\r\n>>> cal = Calendar(name='Actual')\r\n>>> cal\r\nCalendar: Actual\r\nStart: 1970-01-01\r\nEnd: 2071-01-01\r\nHolidays: 0\r\n```\r\n\r\nThe Actual Calendar doesn't consider holidays, nor nonworking weekdays for counting business days between 2 dates.\r\nThis is the same of subtracting 2 dates, and adjust methods will return the given argument.\r\nBut the idea of using the Actual Calendar is working with the same interface for any calendar you work with.\r\nWhen you price financial instruments you don't have to check if it uses business days or not.\r\n\r\n> `startdate` and `enddate` defaults to `1970-01-01` and `2071-01-01`, but they can be set during Calendar's instanciation.\r\n\r\n## Vectorized operations\r\n\r\nThe Calendar's methods: `isbizday`, `bizdays`, `adjust_previous`, `adjust_next`, and `offset`, have a vectorized counterparty, inside `Calendar.vec` attribute.\r\n\r\n```{python}\r\n>>> cal = Calendar.load('Test.cal')\r\n>>> dates = ('2002-01-01', '2002-01-02', '2002-01-03')\r\n>>> tuple(cal.vec.adjust_next(dates))\r\n(datetime.date(2002, 1, 2),\r\n datetime.date(2002, 1, 2),\r\n datetime.date(2002, 1, 3))\r\n>>> list(cal.vec.bizdays('2001-12-31', dates))\r\n[0, 1, 2]\r\n```\r\n\r\nThese functions accept sequences and single values, but always return generators.\r\nIn `bizdays` call a date and a sequence have been passed, computing business days between that date and all the others.\r\n\r\n### Recycle rule\r\n\r\nOnce you pass 2 sequences for `bizdays` and `offset` and those sequences doesn't have the same length, no problem.\r\nThe shorter collection is cycled to fit the longer's length.\r\n\r\n```{python}\r\n>>> dates = ('2002-01-01', '2002-01-02', '2002-01-03', '2002-01-04', '2002-01-05')\r\n>>> tuple(cal.vec.offset(dates, (1, 2, 3)))\r\n(datetime.date(2002, 1, 3),\r\n datetime.date(2002, 1, 4),\r\n datetime.date(2002, 1, 8),\r\n datetime.date(2002, 1, 7),\r\n datetime.date(2002, 1, 9))\r\n```\r\n\r\n> These methods work well with sequences but not with generators, since I haven't found an easy way to find out which generator is the shorter.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}